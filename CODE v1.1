#include <Adafruit_NeoPixel.h>

#define PIN_STRIP1 6
#define PIN_STRIP2 7
#define PIN_STRIP3 8
#define PIN_STRIP4 9
#define NUM_PIXELS 24
#define NUM_PIXELS_SMALL 1
#define BUTTON_PIN 4
#define RESET_BUTTON_PIN 3

Adafruit_NeoPixel strip1 = Adafruit_NeoPixel(NUM_PIXELS, PIN_STRIP1, NEO_GRB + NEO_KHZ800);
Adafruit_NeoPixel strip2 = Adafruit_NeoPixel(NUM_PIXELS, PIN_STRIP2, NEO_GRB + NEO_KHZ800);
Adafruit_NeoPixel strip3 = Adafruit_NeoPixel(NUM_PIXELS_SMALL, PIN_STRIP3, NEO_GRB + NEO_KHZ800);
Adafruit_NeoPixel strip4 = Adafruit_NeoPixel(NUM_PIXELS_SMALL, PIN_STRIP4, NEO_GRB + NEO_KHZ800);

int lastButtonState = HIGH;
int lastResetButtonState = HIGH;

int colorIndex = 0; // 0 = Static Color, 1 = Outer LEDs Green, 2 = Pulsing Green, 3 = RGB Wheel, 4 = Stars Animation, 5 = Police Animation, 6 = Random Color Blinks, 7 = Running Lights
uint32_t currentColor = strip1.Color(0, 255, 0); // Initial color (Green)

unsigned long previousMillis = 0;
const long interval = 100; // Zeitintervall für die RGB Wheel Animation
unsigned long lastWhiteAnimMillis = 0; // Zeitstempel für die letzte weiße Animation
unsigned long lastPoliceAnimMillis = 0; // Zeitstempel für die letzte Polizei Animation
unsigned long lastPulseMillis = 0; // Zeitstempel für die letzte Pulsation
const long policeInterval = 300; // Intervall für die Polizei-Animation
int wheelPosition = 0; // Position im RGB-Farbkreis
unsigned long lastRunningLightsMillis = 0; // Zeitstempel für die letzte laufende Lichter Animation
const long runningLightsInterval = 100; // Intervall für das Ein- und Ausschalten der LEDs

void setup() {
  Serial.begin(9600); // Initialize serial communication at 9600 bits per second
  strip1.begin();
  strip2.begin();
  strip3.begin();
  strip4.begin();
  strip1.show(); // Initialize all pixels to 'off'
  strip2.show(); // Initialize all pixels to 'off'
  strip3.show(); // Initialize all pixels to 'off'
  strip4.show(); // Initialize all pixels to 'off'

  pinMode(BUTTON_PIN, INPUT_PULLUP);
  pinMode(RESET_BUTTON_PIN, INPUT_PULLUP);

  // Startup Animation
  startupAnimation();

  // Set initial color
  setAllPixelsColor(currentColor);
}

void loop() {
  unsigned long currentMillis = millis();

  // Read the button states
  int buttonState = digitalRead(BUTTON_PIN);
  int resetButtonState = digitalRead(RESET_BUTTON_PIN);

  // Check if the main button is pressed
  if (buttonState == LOW && lastButtonState == HIGH) {
    // Toggle color mode on button press
    colorIndex = (colorIndex + 1) % 8; // Toggle between Static Color (0), Outer LEDs Green (1), Pulsing Green (2), RGB Wheel (3), Stars Animation (4), Police Animation (5), Random Color Blinks (6), Running Lights (7)
    if (colorIndex == 0) {
      currentColor = strip1.Color(0, 255, 0); // Set to Green
      setAllPixelsColor(currentColor);
    }
    Serial.print("Button Pressed. Color Index: ");
    Serial.println(colorIndex);
    delay(200); // Debounce delay
  }

  // Check if the reset button is pressed
  if (resetButtonState == LOW && lastResetButtonState == HIGH) {
    // Set mode to Static Color (0)
    colorIndex = 0;
    currentColor = strip1.Color(0, 255, 0); // Set to Green
    setAllPixelsColor(currentColor);
    Serial.println("Reset Button Pressed. Mode set to Static Color (0).");
    delay(200); // Debounce delay
  }

  lastButtonState = buttonState;
  lastResetButtonState = resetButtonState;

  // Update the animation mode
  if (colorIndex == 1) {
    // Outer LEDs Green mode
    setOuterLEDsGreen();
  } else if (colorIndex == 2) {
    // Pulsing Green mode
    if (currentMillis - lastPulseMillis >= 50) {
      lastPulseMillis = currentMillis;
      pulsingGreenAnimation();
    }
  } else if (colorIndex == 3) {
    // Running Lights mode
    if (currentMillis - lastRunningLightsMillis >= runningLightsInterval) {
      lastRunningLightsMillis = currentMillis;
      runningLightsAnimation();
    }
  } else if (colorIndex == 4) {
    // RGB Wheel mode
    if (currentMillis - previousMillis >= interval) {
      previousMillis = currentMillis;
      updateRGBWheel(strip1);
      updateRGBWheel(strip2);
      updateRGBWheelSmall(strip3);
      updateRGBWheelSmall(strip4);
    }
  } else if (colorIndex == 5) {
    // Stars Animation mode
    starsAnimation();
  } else if (colorIndex == 6) {
    // Police Animation mode
    if (currentMillis - lastPoliceAnimMillis >= policeInterval) {
      lastPoliceAnimMillis = currentMillis;
      policeAnimation();
    }
  } else if (colorIndex == 7) {
    // Random Color Blinks mode
    randomColorBlinks();
  } else {
    // Static Color mode
    setAllPixelsColor(currentColor);
    if (currentMillis - lastWhiteAnimMillis >= 5000) {
      lastWhiteAnimMillis = currentMillis;
      // Optional: Call whitePixelRacer if you want the white animation
    }
  }
}

void setAllPixelsColor(uint32_t color) {
  // Set NeoPixels color (background color)
  for (int i = 0; i < NUM_PIXELS; i++) {
    strip1.setPixelColor(i, color);
    strip2.setPixelColor(i, color);
  }
  strip3.setPixelColor(0, color);
  strip4.setPixelColor(0, color);

  strip1.show();
  strip2.show();
  strip3.show();
  strip4.show();
}

void setOuterLEDsGreen() {
  // Set LEDs in regular intervals of 5 to green
  strip1.clear();
  strip2.clear();
  strip3.clear();
  strip4.clear();

  for (int i = 0; i < NUM_PIXELS; i += 5) {
    strip1.setPixelColor(i, strip1.Color(0, 255, 0)); // Set every 5th LED to green
    strip2.setPixelColor(i, strip2.Color(0, 255, 0)); // Set every 5th LED to green
  }
  strip3.setPixelColor(0, strip3.Color(0, 255, 0));
  strip4.setPixelColor(0, strip4.Color(0, 255, 0));
  
  strip1.show();
  strip2.show();
  strip3.show();
  strip4.show();
}

void updateRGBWheel(Adafruit_NeoPixel& strip) {
  // Update the color of all pixels in the RGB wheel effect
  for (int i = 0; i < NUM_PIXELS; i++) {
    // Calculate wheel color for the current pixel
    strip.setPixelColor(i, wheel((i + wheelPosition) % 256));
  }
  strip.show();

  // Move the color wheel position
  wheelPosition = (wheelPosition + 1) % 256; // Increment the wheel position
  delay(20); // Delay for color wheel speed
}

void updateRGBWheelSmall(Adafruit_NeoPixel& strip) {
  // Update the color of the single pixel in the RGB wheel effect
  strip.setPixelColor(0, wheel(wheelPosition % 256));
  strip.show();
}

uint32_t wheel(byte pos) {
  // Generate a color wheel effect
  if (pos < 85) {
    return strip1.Color(pos * 3, 255 - pos * 3, 0);
  } else if (pos < 170) {
    pos -= 85;
    return strip1.Color(255 - pos * 3, 0, pos * 3);
  } else {
    pos -= 170;
    return strip1.Color(0, pos * 3, 255 - pos * 3);
  }
}

void startupAnimation() {
  // Define the animation speed
  const int speed = 20; // Speed of the animation (lower is faster)

  // Define green shades for the animation

  // End with a full green wipe effect (backward)
  for (int i = NUM_PIXELS - 1; i >= 0; i--) {
    // Set pixels from end to current position with full green
    for (int j = NUM_PIXELS - 1; j >= i; j--) {
      strip1.setPixelColor(j, strip1.Color(0, 255, 0)); // Full green
      strip2.setPixelColor(j, strip2.Color(0, 255, 0)); // Full green
    }
    strip1.show();
    strip2.show();
    delay(speed);
  }

  // Set the final full green state
  for (int i = 0; i < NUM_PIXELS; i++) {
    strip1.setPixelColor(i, strip1.Color(0, 255, 0)); // Full green
    strip2.setPixelColor(i, strip2.Color(0, 255, 0)); // Full green
  }
  strip3.setPixelColor(0, strip3.Color(0, 255, 0)); // Full green
  strip4.setPixelColor(0, strip4.Color(0, 255, 0)); // Full green

  strip1.show();
  strip2.show();
  strip3.show();
  strip4.show();
}

void pulsingGreenAnimation() {
  // Pulsing green effect
  static int brightness = 0;
  static int increment = 5;

  brightness += increment;
  if (brightness <= 0 || brightness >= 255) {
    increment = -increment; // Reverse direction at the ends
  }

  uint32_t pulsingGreen = strip1.Color(0, brightness, 0); // Adjust the green value
  setAllPixelsColor(pulsingGreen);
}

void policeAnimation() {
  // Police lights animation (red and blue flashing)
  static bool redOn = true;

  uint32_t redColor = strip1.Color(255, 0, 0); // Red color
  uint32_t blueColor = strip1.Color(0, 0, 255); // Blue color
  uint32_t offColor = strip1.Color(0, 0, 0); // Off

  // Set the colors alternately
  for (int i = 0; i < NUM_PIXELS; i++) {
    if (redOn) {
      strip1.setPixelColor(i, (i % 2 == 0) ? redColor : offColor);
      strip2.setPixelColor(i, (i % 2 == 0) ? redColor : offColor);
    } else {
      strip1.setPixelColor(i, (i % 2 == 0) ? offColor : blueColor);
      strip2.setPixelColor(i, (i % 2 == 0) ? offColor : blueColor);
    }
  }

  strip1.show();
  strip2.show();

  // Switch the colors
  redOn = !redOn;
}

void randomColorBlinks() {
  // Random color blinks effect
  uint32_t randomColor1 = strip1.Color(random(256), random(256), random(256)); // Random color for strip1
  uint32_t randomColor2 = strip2.Color(random(256), random(256), random(256)); // Random color for strip2
  uint32_t randomColor3 = strip3.Color(random(256), random(256), random(256)); // Random color for strip3
  uint32_t randomColor4 = strip4.Color(random(256), random(256), random(256)); // Random color for strip4

  // Set a random pixel to a random color
  strip1.setPixelColor(random(NUM_PIXELS), randomColor1);
  strip2.setPixelColor(random(NUM_PIXELS), randomColor2);
  strip3.setPixelColor(0, randomColor3);
  strip4.setPixelColor(0, randomColor4);

  strip1.show();
  strip2.show();
  strip3.show();
  strip4.show();
}

void runningLightsAnimation() {
  static int position = 0; // Current position of the running lights
  position++; // Move to the next position

  for (int i = 0; i < NUM_PIXELS; i++) {
    // Set the color for each pixel
    strip1.setPixelColor(i, strip1.Color((sin(i + position) * 127 + 128) / 255, 0, 0)); // Red color
    strip2.setPixelColor(i, strip2.Color((sin(i + position) * 127 + 128) / 255, 0, 0)); // Red color
  }
  strip3.setPixelColor(0, strip3.Color((sin(position) * 127 + 128) / 255, 0, 0)); // Red color
  strip4.setPixelColor(0, strip4.Color((sin(position) * 127 + 128) / 255, 0, 0)); // Red color

  strip1.show();
  strip2.show();
  strip3.show();
  strip4.show();

  delay(50); // Adjust the speed of the running lights
}

void starsAnimation() {
  // Starry sky effect
  strip1.clear();
  strip2.clear();
  strip3.clear();
  strip4.clear();

  // Randomly set some pixels to white (like stars)
  for (int i = 0; i < NUM_PIXELS / 5; i++) {
    strip1.setPixelColor(random(NUM_PIXELS), strip1.Color(255, 255, 255)); // White color
    strip2.setPixelColor(random(NUM_PIXELS), strip2.Color(255, 255, 255)); // White color
  }

  strip1.show();
  strip2.show();
  strip3.show();
  strip4.show();

  delay(100); // Adjust the speed of the starry sky effect
}
